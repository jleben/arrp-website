extends /templates/doc-next-page.pug

block doc-content

  h1 Interface: C++

  p.
    By default, the Arrp compiler generates C++ code from an Arrp file:

  pre arrp example.arrp

  p.
    A header file named "module.h" is generated, with "module" replaced by
    the actual name of the compiled module.
    To generate a file with a different name, say "desired_name.h",
    add the option "--output desired_name":

  pre arrp example.arrp --output desired_name

  h1 Namespace

  p.
    By default the C++ code is placed into a namespace with the same name as the module name.
    To generate code in a different namespace, provide the "--cpp-namespace" option:

  pre arrp example.arrp --cpp-namespace some_namespace

  h1 The program class

  p.
    An Arrp program is represented as a C++ class named "program".
    For example:

  p: b Arrp:

  pre.
    module example;

    input a : int;
    input b : [~,10]real64;
    ...
    output c;

  p: b C++:

  pre.
    namespace example
    {
      template #{'<typename IO>'}
      class program
      {
      private:
          int a;
          double b[10];
      public:
          IO * io;
          void prelude()
          {
              ... input_a(a) ...
              ... input_b(b) ...
          }
          void period()
          {
              ... input_b(b) ...
              ... output_c(...) ...
          }
      };
    }

  h2 Prelude and period

  p.
    The program class has two functions, named "prelude" and "period".

  p.
    The prelude computes all finite data and possibly an introductory part of infinite arrays.
    It should be called before calling the period function and only once.

  p.
    The period computes one period of the infinite arrays. It should be called repeatedly
    after calling the prelude once.

  h2 Input and output

  p.
    The program class is a template with a parameter IO representing the type that
    provides the input and consumes the output. The class contains
    a data field #[code IO* io] - a pointer which must be initialized to an instance
    of IO before using the rest of the class.

  p.
    When some input or output data needs to be exchanged, the program class will
    call a method of the IO object.
    This method is called #[code input_name] for an input
    named "name", and likewise #[code output_name] for an output.
    The method is passed an argument:
    the buffer where the data is to be written or read from.

  p.
    If an input or output is a stream, the input or output function is
    called once for each sample of the stream in the first dimension.
    The calls happen in order from index 0 to infiniy.

  p.
    If an input or output is not a stream, the input or output function
    is called only a single time for the entire data.
