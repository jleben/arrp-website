extends ../default-page.pug

block page-content

  p.
    Arrp is a functional language for digital signal processing that:

  ul
    li Makes it easy to turn mathematical equations into code.
    li Supports multi-dimensional signals and signals with different rates.
    li Enables powerful abstractions like polymorphic and higher-order functions.
    li Translates into optimized C++ and executes very efficiently.

  div(class='buttons')
    a(class='button-link' href='doc/compiler') Install Arrp Compiler
    a(class='button-link' href='play') Try Arrp Online

  h1 Features


  #examples-table

    .example
      .description
        p Write code like you write the math - using the same equations
      .code: pre.
          y[0] = 0;
          y[n] = a*x[n] + (1-a)*y[n-1];

    .example
      .description
        p Work with signals at different rates
      .code: pre.
          y[n] = x[n*hop]

    .example
      .description
        p Work with multi-dimensional streams
      .code: pre.
         y[n,k] = x[n+k] * w[k]

    .example
      .description
        p Do math with entire signals
      .code: pre.
          x[n] = n;
          y = sin(x/100*2*pi) * 0.5;

    .example
      .description
        p Define generic functions with other functions as parameters
      .code: pre.
          apply_to_pairs(x, f) = y where
              y[t] = f(x[t], x[t+1]);

          mean(a, b) = (a + b)/2;

          output = apply_to_pairs(input, mean);
